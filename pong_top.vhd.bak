LIBRARY  ieee;
USE ieee.std_logic_1164.all;

ENTITY pong_top IS
	PORT(
	oVGA_CLOCK :IN STD_LOGIC;                     --VGA clock clock
	oHEX0_D : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- 7seg  display 1
	oHEX1_D : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- 7seg  display 1
	ps2_clk      : IN  STD_LOGIC;                     --clock signal from PS/2 keyboard
	ps2_data     : IN  STD_LOGIC;                    --data signal from PS/2 keyboard
	oVGA_HS : out STD_LOGIC;
	oVGA_VS : out STD_LOGIC;
	oVGA_R : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
	oVGA_G : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
	oVGA_B : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
	oVGA_BLANK_N   :  OUT  STD_LOGIC;  --direct blacking output 
   oVGA_SYNC_N    :  OUT  STD_LOGIC --sync-on-green output
	
	); 

END pong_top;

	ARCHITECTURE logic OF pong_top IS
	
		SIGNAL ps2_code_out:  STD_LOGIC_VECTOR(7 downto 0);
		SIGNAL ps2_new_out:  STD_LOGIC;
		SIGNAL rightPaddleDirection : INTEGER := 0;
		SIGNAL leftPaddleDirection : INTEGER := 0;
		signal halfClock : STD_LOGIC;
		signal horizontalPosition : integer range 0 to 800 := 0;
		signal verticalPosition : integer range 0 to 521 := 0;
		signal hsyncEnable : STD_LOGIC;
		signal vsyncEnable : STD_LOGIC;

		signal photonX : integer range 0 to 640 := 0;
		signal photonY : integer range 0 to 480 := 0;

		constant leftPaddleX : integer := 25;
		signal leftPaddleY : integer range 0 to 480 := 240;
		constant rightPaddleX : integer := 615;
		signal rightPaddleY : integer range 0 to 480 := 240;


		signal paddleHalfHeight : integer range 0 to 50 := 30;
		constant paddleHalfWidth : integer := 6;

		constant leftPaddleBackX : integer := leftPaddleX-paddleHalfWidth;
		constant leftPaddleFrontX : integer := leftPaddleX+paddleHalfWidth;
		constant rightPaddleFrontX : integer := rightPaddleX-paddleHalfWidth;
		constant rightPaddleBackX : integer := rightPaddleX+paddleHalfWidth;
		constant paddleBottomLimit : integer := 474;
		constant paddleTopLimit : integer := 4;

		signal color : STD_LOGIC_VECTOR (2 downto 0) := "000";

		signal ballMovementClockCounter : integer range 0 to 1000000 := 0;
		signal ballMovementClock : STD_LOGIC := '0';
		signal paddleMovementClockCounter : integer range 0 to 1000000 := 0;
		signal paddleMovementClock : STD_LOGIC := '0';

		constant ballMaxSpeed : integer := 8;
		signal ballX : integer range -100 to 640 := 320;
		signal ballY : integer range -100 to 480 := 240;
		signal ballSpeedX : integer range -100 to 100 := 1;
		signal ballSpeedY : integer range -100 to 100 := 1;
	
		COMPONENT x7seg IS
			PORT(
			x: IN STD_LOGIC_VECTOR(3 downto 0); -- input
			clk : IN STD_LOGIC;   -- clock
			out1 : OUT STD_LOGIC_VECTOR(6 downto 0)
			);
		END COMPONENT;
		
		COMPONENT ps2_keyboard IS
			PORT(
				 clk          : IN  STD_LOGIC;                     --system clock
				 ps2_clk      : IN  STD_LOGIC;                     --clock signal from PS/2 keyboard
				 ps2_data     : IN  STD_LOGIC;                     --data signal from PS/2 keyboard
				 ps2_code_new : OUT STD_LOGIC;                     --flag that new PS/2 code is available on ps2_code bus
				 ps2_code : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);       --flag that new PS/2 code is available on ps2_code bus
				 LeftPaddleDirection : out  INTEGER;				--Direction of right paddle
             RightPaddleDirection : out  INTEGER

			);
		END COMPONENT;
		
	BEGIN
	oVGA_SYNC_N <= '0';   --no sync on green
	oVGA_BLANK_N <= '1';  --no direct blanking
		keyboard:ps2_keyboard
		
			    PORT MAP(
				 clk => oVGA_CLOCK, 
				 ps2_clk => ps2_clk, 
				 ps2_data => ps2_data, 
				 ps2_code_new=>ps2_new_out,
				 ps2_code=>ps2_code_out,
				 rightPaddleDirection=>rightPaddleDirection,
				 leftPaddleDirection=>leftPaddleDirection
				 );
				 
		display1:x7seg
		
				 PORT MAP(
				 
					x=>ps2_code_out(7 downto 4),
					clk=>oVGA_CLOCK,
					out1=>oHEX0_D
					
					);
		display2:x7seg
		
				PORT MAP(
				
				x=>ps2_code_out(3 downto 0),
				clk=>oVGA_CLOCK,
				out1=>oHEX1_D
				
				);

	-- Half the clock
	clockScaler : process(oVGA_CLOCK)
	begin
		if oVGA_CLOCK'event and oVGA_CLOCK = '1' then
			halfClock <= not halfClock;
		end if;
	end process clockScaler;
		
	-- Allows Paddle movement on clock pulse
	-- Stops at VGA border
	paddleMovementClockScaler : process(oVGA_CLOCK)
	begin
		if oVGA_CLOCK'event and oVGA_CLOCK = '1' then
			paddleMovementClockCounter <= paddleMovementClockCounter + 1;
			
			if (paddleMovementClockCounter = 100000) then
				paddleMovementClock <= not paddleMovementClock;
				paddleMovementClockCounter <= 0;
			end if;
		end if;
	end process paddleMovementClockScaler;

	signalTiming : process(halfClock)
	begin
		if halfClock'event and halfClock = '1' then
			if horizontalPosition = 800 then
				horizontalPosition <= 0;
				verticalPosition <= verticalPosition + 1;
				
				if verticalPosition = 521 then
					verticalPosition <= 0;
				else
					verticalPosition <= verticalPosition + 1;
				end if;
			else
				horizontalPosition <= horizontalPosition + 1;
			end if;
		end if;
	end process signalTiming;
	
	vgaSync : process(halfClock, horizontalPosition, verticalPosition)
	begin
		if halfClock'event and halfClock = '1' then
			if horizontalPosition > 0 and horizontalPosition < 97 then
				hsyncEnable <= '0';
			else
				hsyncEnable <= '1';
			end if;
			
			if verticalPosition > 0 and verticalPosition < 3 then
				vsyncEnable <= '0';
			else
				vsyncEnable <= '1';
			end if;
		end if;
	end process vgaSync;
	
	coordinates : process(horizontalPosition, verticalPosition)
	begin
		photonX <= horizontalPosition - 144;
		photonY <= verticalPosition - 31;
	end process coordinates;
	
	colorSetter : process(photonX, photonY, halfClock)
	begin
	-- Paddles
		if ((photonX >= leftPaddleBackX) and (photonX <= leftPaddleFrontX)
			and (photonY >= leftPaddleY - paddleHalfHeight) and (photonY <= leftPaddleY + paddleHalfHeight)) or
			((photonX >= rightPaddleFrontX) and (photonX <= rightPaddleBackX)
			and (photonY >= rightPaddleY - paddleHalfHeight) and (photonY <= rightPaddleY + paddleHalfHeight)) then
			color <= "111";
		-- Dashed Line
		elsif (photonX = 319 and photonY mod 16 <= 10) then
			color <= "111";
		else
			color <= "000";
		end if;
	end process colorSetter;
-- Left Player Control
	-- Stops at Limit
	leftPaddleMovement : process(paddleMovementClock)
	begin
		if paddleMovementClock'event and paddleMovementClock = '1' then
			if leftPaddleY + leftPaddleDirection < paddleBottomLimit - paddleHalfHeight 
				and leftPaddleY + leftPaddleDirection > paddleTopLimit + paddleHalfHeight then
				leftPaddleY <= leftPaddleY + leftPaddleDirection;
			end if;
		end if;
	end process leftPaddleMovement;
	
	-- Right Player Control
	-- Stops at limit
	rightPaddleMovement : process(paddleMovementClock)
	begin
		if paddleMovementClock'event and paddleMovementClock = '1' then
			if rightPaddleY + rightPaddleDirection < paddleBottomLimit - paddleHalfHeight 
				and rightPaddleY + rightPaddleDirection > paddleTopLimit + paddleHalfHeight then
				rightPaddleY <= rightPaddleY + rightPaddleDirection;
			end if;
		end if;
	end process rightPaddleMovement;
	
	--drawing process
	draw : process(photonX, photonY, halfClock)
	begin
		if halfClock'event and halfClock = '1' then
			oVGA_HS <= hsyncEnable;
			oVGA_VS <= vsyncEnable;
		
			if (photonX < 640 and photonY < 480) then
				oVGA_R <= (others => color(2));
				oVGA_G <= (others => color(1));
				oVGA_B <= (others => color(0));
			else
				oVGA_R <= (others => '0');
				oVGA_G <= (others => '0');
				oVGA_B <= (others => '0');
			end if;
		end if;
	end process draw;

END logic;
	

	
	